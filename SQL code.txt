CREATE DATABASE pizzahut;
USE pizzahut;


CREATE TABLE orders (
order_id INT PRIMARY KEY,
order_date DATE NOT NULL,
order_time TIME NOT NULL);

CREATE TABLE order_details(
order_details_id INT PRIMARY KEY,
order_id INT NOT NULL,
pizza_id TEXT NOT NULL,
quantity INT NOT NULL);

SELECT * FROM pizzas;

SELECT * FROM orders;

SELECT * FROM pizza_types;

SELECT * FROM order_details;

/* Q1 Retrive the total number of orders placed. */
SELECT count(order_id) AS total_no_of_orders
FROM orders;

/* Q2 Calculate the total revenue generated from pizza sales.  */
SELECT sum(order_details.quantity * pizzas.price) AS total_revenue
FROM order_details
JOIN pizzas
ON pizzas.pizza_id = order_details.pizza_id;

/* Q4 Identify the highest-priced pizza. */
SELECT pizza_id
FROM pizzas
WHERE price IN (SELECT max(price)
                FROM pizzas 
);

/* Q4 Identify the most common pizza size ordered. */
SELECT pizzas.size, count(order_details.order_details_id)
FROM pizzas
JOIN order_details
ON pizzas.pizza_id=order_details.pizza_id
GROUP BY pizzas.size
ORDER BY count(order_details.order_details_id) DESC
LIMIT 1;

/* Q5 List the top 5 most ordered pizza types along with their quantities. */
SELECT pizza_types.name, sum(order_details.quantity) AS quantity
FROM pizza_types 
JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name ORDER BY quantity DESC LIMIT 5;

/* Q6 Join the necessary tables to find the total quantity of each pizza category ordered. */
SELECT pizza_types.category, SUM(order_details.quantity) AS quantity
FROM pizza_types
JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY quantity DESC LIMIT 5;

/* Q6 Determine the distribution of orders by hour of the day. */
SELECT HOUR(order_time) AS hour,COUNT(order_id) AS order_count
FROM orders
GROUP BY HOUR(order_time);

/* Q7 Join relevant tables to find the category-wise distribution of pizzas. */
SELECT category, count(name)
FROM pizza_types
GROUP BY category;

/* Q8 Group the orders by date and calculate the average number of pizzas ordered per day.*/
SELECT round(avg(quantity),0) AS avg_pizza_ordered
FROM (SELECT orders.order_date,sum(order_details.quantity) AS quantity
FROM orders JOIN order_details
ON orders.order_id = order_details.order_id
GROUP BY orders.order_date) AS order_quantity;

/* Q9 Determine the top 3 most ordered pizza types based on revenue.*/
SELECT pizza_types.name,
sum(order_details.quantity * pizzas.price) AS revenue
FROM pizza_types JOIN pizzas
ON pizzas.pizza_type_id = pizza_types.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name ORDER BY revenue DESC LIMIT 3;

/* Q10 Calculate the percentage contribution of each pizza type to total revenue.*/
SELECT pizza_types.category,
(sum(order_details.quantity*pizzas.price) / (SELECT ROUND(sum(order_details.quantity * pizzas.price),2) AS total_sales
FROM order_details JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id) )*100 AS revenue
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category ORDER BY revenue DESC;

/* Q11 Analyze the cumulative revenue generated over time.*/
SELECT order_date,
SUM(revenue)over(order BY order_date)AS cum_revenue
FROM
(SELECT orders.order_date,
sum(order_details.quantity * pizzas.price) AS revenue
FROM order_details JOIN pizzas
ON order_details.pizza_id = pizzas.pizza_id
JOIN orders
ON orders.order_id = order_details.order_id
GROUP BY orders.order_date) AS sales;

